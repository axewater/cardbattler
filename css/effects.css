/* --- Visual Feedback Effects --- */

/* Damage/Heal Flashes */
.damage-flash {
    animation: flash-red 0.3s ease-out;
}

@keyframes flash-red {
    0% { background-color: rgba(255, 0, 0, 0.5); }
    100% { background-color: rgba(255, 255, 255, 0.8); } /* Assuming default hero bg */
}

.heal-flash {
     animation: flash-green 0.3s ease-out;
}

@keyframes flash-green {
    0% { background-color: rgba(0, 255, 0, 0.5); }
    100% { background-color: rgba(255, 255, 255, 0.8); } /* Assuming default hero bg */
}

/* Card Shakes */
.card-damage-shake {
    animation: shake 0.2s ease-in-out;
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-3px) rotate(-1deg); }
  75% { transform: translateX(3px) rotate(1deg); }
}

/* Stat/Effect Flashes */
@keyframes flash-bright {
    0% { filter: brightness(1.5); }
    100% { filter: brightness(1); }
}

.stat-change-flash {
    animation: flash-bright 0.3s ease-out;
}

/* --- Card Movement Animations --- */

/* Class applied to the card *during* animation */
.card-animating {
    position: fixed; /* Take out of flow, position relative to viewport */
    z-index: 1500; /* Ensure it's above most other elements */
    pointer-events: none; /* Prevent interaction during animation */
    transition: transform 0.4s cubic-bezier(0.25, 0.1, 0.25, 1); /* Smooth transition */
    /* Size should match the card */
    width: 80px;
    height: 120px;
    /* Will be populated with card content by JS */
    background-color: white; /* Fallback */
    border: 1px solid #333;
    border-radius: 5px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}

/* Class applied to the card *during* draw animation */
.card-draw-animating {
    position: fixed;
    z-index: 1550; /* Above card-animating, below zoom */
    pointer-events: none;
    width: 80px; /* Standard card size */
    height: 120px;
    background-color: #555; /* Dark grey for card back */
    border: 3px solid #ccc;
    border-radius: 5px;
    box-shadow: 0 3px 10px rgba(0,0,0,0.4);
    /* Add a simple pattern or image for card back if desired */
    background-image: linear-gradient(45deg, #666 25%, transparent 25%), linear-gradient(-45deg, #666 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #666 75%), linear-gradient(-45deg, transparent 75%, #666 75%);
    background-size: 20px 20px;
    background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
    transition: transform 0.5s cubic-bezier(0.3, 0.7, 0.4, 1.1), opacity 0.5s ease-out; /* Smooth curve, allow overshoot */
}

/* Specific animation keyframes (optional, could do all with JS transform) */
/* Example: Attack lunge (could be refined) */
@keyframes attack-lunge {
    0% { transform: translate(0, 0) scale(1.05); }
    50% { transform: translate(var(--attack-dx, 0px), var(--attack-dy, 0px)) scale(1.15); } /* Move towards target */
    100% { transform: translate(0, 0) scale(1.05); } /* Return to start */
}

/* --- Card Zoom Container --- */
#card-zoom-container {
    position: fixed; /* Position relative to the viewport */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Center the element */
    width: 240px; /* Larger width */
    height: 360px; /* Larger height */
    background-color: rgba(255, 255, 255, 0.98); /* Slightly transparent white */
    border: 3px solid #555;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5); /* Prominent shadow */
    z-index: 2000; /* Ensure it's above everything else */
    pointer-events: none; /* Prevent interaction with the zoom container itself */
    display: flex; /* Use flex for internal layout */
    flex-direction: column;
    padding: 12px;
    box-sizing: border-box;
    font-size: 16px; /* Larger base font */
    /* overflow: hidden; Let internal elements handle overflow */
    transition: opacity 0.1s ease-in-out, visibility 0.1s ease-in-out; /* Smooth fade */
}

#card-zoom-container.hidden {
    display: none; /* Use display none for complete removal */
    opacity: 0;
    visibility: hidden;
}

/* Styles for elements INSIDE the zoom container */
#card-zoom-container .card-cost { font-size: 24px; width: 40px; height: 40px; top: 5px; left: 5px; position: absolute; z-index: 1; }
#card-zoom-container .card-name {
    font-size: 16px; /* Smaller zoomed name */
    text-align: left; /* Align left */
    font-weight: bold;
    position: absolute; /* Position relative to container */
    z-index: 2; white-space: normal; overflow-wrap: break-word; top: 8px; left: 50px; right: 12px; /* Position next to cost */
}

#card-zoom-container .card-image-zoom {
    width: 150px;
    height: 150px;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    margin: 50px auto 5px auto; /* Adjust top margin to clear cost/name */
    border: 2px solid #555;
    border-radius: 5px;
    flex-shrink: 0; /* Prevent shrinking */
}

#card-zoom-container .card-effect {
    font-size: 13px; /* Slightly smaller effect text */
    line-height: 1.3;
    position: relative; /* Changed from static to allow margin adjustment */
    display: block !important; /* Ensure it's always visible, override potential .card hiding */
    flex-grow: 1; /* Take remaining space */
    margin: 0 0 45px 0; /* Adjust margin to fit below image and above stats */
    overflow-y: auto; /* Allow vertical scrolling */
    max-height: 80px; /* Adjusted max height */
    text-align: center; padding: 5px; background: rgba(0,0,0,0.03); border-radius: 5px; }
#card-zoom-container .card-attack, #card-zoom-container .card-health { font-size: 24px; width: 40px; height: 40px; bottom: 5px; position: absolute; z-index: 1; display: flex; justify-content: center; align-items: center; font-weight: bold; border-radius: 50%; color: white; border: 1px solid white; }
#card-zoom-container .card-attack { left: 5px; background-color: orange; }
#card-zoom-container .card-health { right: 5px; background-color: red; }
#card-zoom-container .is-taunt { border: 3px solid brown; }
#card-zoom-container .is-frozen { box-shadow: inset 0 0 10px 3px rgba(173, 216, 230, 0.8); filter: saturate(0.5) brightness(0.9); border-color: lightblue; }
#card-zoom-container .has-frenzy { border: 2px solid darkred; }
#card-zoom-container .is-stealthed { opacity: 0.8; box-shadow: inset 0 0 10px 3px rgba(50, 50, 50, 0.5); }
#card-zoom-container.Creature { background-color: #c8e6c9; }
#card-zoom-container.Spell { background-color: #bbdefb; }

/* --- Spell Visual Effects --- */
.spell-effect {
    position: fixed;
    z-index: 1600; /* Above cards, below zoom */
    pointer-events: none;
    width: 50px; /* Base size, can be overridden */
    height: 50px;
    border-radius: 50%;
    opacity: 0; /* Start invisible */
    transform: translate(-50%, -50%) scale(0.5); /* Center on target point, start small */
    /* Animation will be applied by specific type */
}

/* --- Keyframes for Spell Effects --- */
@keyframes spell-fade-in-out {
    0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
    25% { opacity: 0.8; transform: translate(-50%, -50%) scale(1); }
    75% { opacity: 0.8; transform: translate(-50%, -50%) scale(1); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
}

@keyframes spell-pulse {
    0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
    25% { opacity: 0.9; transform: translate(-50%, -50%) scale(1.1); }
    50% { opacity: 0.7; transform: translate(-50%, -50%) scale(0.9); }
    75% { opacity: 0.9; transform: translate(-50%, -50%) scale(1.1); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }
}

@keyframes spell-shatter {
    0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5) rotate(0deg); }
    25% { opacity: 1; transform: translate(-50%, -50%) scale(1.1) rotate(10deg); }
    100% { opacity: 0; transform: translate(-50%, -50%) scale(0.7) rotate(-15deg); }
    /* TODO: Could add pseudo-elements for shatter particles */
}

/* --- Specific Spell Effect Styles --- */

.spell-effect-fire {
    background: radial-gradient(circle, rgba(255,180,50,0.9) 0%, rgba(255,80,0,0.7) 50%, rgba(200,0,0,0) 70%);
    box-shadow: 0 0 15px 5px rgba(255, 100, 0, 0.5);
    animation: spell-pulse 0.5s ease-out forwards;
}

.spell-effect-frost {
    width: 60px; height: 60px;
    background: radial-gradient(circle, rgba(200,240,255,0.9) 0%, rgba(100,200,255,0.7) 50%, rgba(50,150,255,0) 70%);
    border: 2px solid rgba(220, 250, 255, 0.8);
    box-shadow: 0 0 20px 8px rgba(150, 220, 255, 0.4);
    animation: spell-shatter 0.6s ease-in-out forwards;
}

.spell-effect-arcane {
    background: radial-gradient(circle, rgba(255,150,255,0.9) 0%, rgba(180,50,200,0.7) 50%, rgba(100,0,150,0) 70%);
    box-shadow: 0 0 15px 5px rgba(200, 100, 255, 0.5);
    animation: spell-pulse 0.7s ease-in-out forwards;
}

.spell-effect-holy {
    width: 70px; height: 70px;
    background: radial-gradient(circle, rgba(255,255,200,0.95) 0%, rgba(255,255,100,0.8) 50%, rgba(255,215,0,0) 70%);
    box-shadow: 0 0 25px 10px rgba(255, 255, 150, 0.5);
    animation: spell-fade-in-out 0.6s ease-out forwards;
}

.spell-effect-lightning {
    width: 40px; height: 60px; /* More elongated */
    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%; /* Irregular shape */
    background: linear-gradient(45deg, rgba(255,255,100,0.9) 0%, rgba(100,200,255,0.7) 100%);
    box-shadow: 0 0 15px 5px rgba(200, 220, 255, 0.6);
    animation: spell-fade-in-out 0.4s ease-in forwards; /* Quick zap */
}

.spell-effect-shadow {
    width: 55px; height: 55px;
    background: radial-gradient(circle, rgba(100,50,150,0.8) 0%, rgba(50,0,80,0.6) 50%, rgba(20,0,30,0) 70%);
    box-shadow: 0 0 15px 5px rgba(80, 40, 120, 0.4);
    filter: blur(1px);
    animation: spell-fade-in-out 0.7s ease-out forwards;
}

.spell-effect-physical {
    width: 45px; height: 45px;
    background: radial-gradient(circle, rgba(180,180,180,0.8) 0%, rgba(120,120,120,0.6) 50%, rgba(80,80,80,0) 70%);
    border: 1px solid rgba(100, 100, 100, 0.5);
    box-shadow: 0 0 10px 3px rgba(150, 150, 150, 0.3);
    animation: spell-fade-in-out 0.4s ease-out forwards;
}

/* Example of a movement animation (if needed later) */
/*
@keyframes spell-move-target {
    0% { opacity: 0.5; transform: translate(var(--start-x), var(--start-y)) scale(0.5); }
    100% { opacity: 0; transform: translate(var(--end-x), var(--end-y)) scale(1); }
}
*/
